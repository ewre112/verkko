#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule processONT ....
#
#  This is process_ont_paths in the original.
#    process_ont_paths.sh \
#      unitig-unrolled-hifi-resolved.gfa \
#      alns-ont.gaf \
#      unitig-unrolled-ont-resolved.gfa   <- output
#      min_alloed_cov = 5
#      resolve_steps = 20 10 5
#
#  Configuration Parameters:
#    ....
#

rule processONT:
    input:
       graph            = {rules.refillGapONTs.output.graph},
       hificov          = {rules.buildGraph.output.hificov},
       ont_paths        = {rules.refillGapONTs.output.paths}
    output:
       graph            = '4-processONT/unitig-unrolled-ont-resolved.gfa',
       ontcov           = '4-processONT/nodecovs-ont.csv'
    log:
        err             = '4-processONT/processONT.err'
    params:
        maps            = getAllMappings(4),
        graphs          = getAllGraphs(4),
        min_allowed_cov = config['pop_min_allowed_cov'],
        resolve_steps   = config['pop_resolve_steps']
    threads:
        int(config['pop_n_cpus'])
    resources:
        job_id = 1,
        n_cpus = int(config['pop_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getMemoryRequest(attempt, 'pop'),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'pop')
    shell:
        '''
cd 4-processONT

cat > ./processONT.sh <<EOF
#!/bin/sh
set -e

echo ""
echo Step 2c
{PYTHON} {VERKKO}/scripts/calculate_coverage.py ../{input.graph} \\\\
  < ../{input.ont_paths} \\\\
  > ../{output.ontcov}

echo ""
echo Step 2d
cut -f 6 < ../{input.ont_paths} > paths.txt

echo ""
echo Step 3a
awk '{{ \\\\
        if (\$2 >= 100000) {{ \\\\
          sum += \$2 * \$3; \\\\
          count += \$2; \\\\
        }} \\\\
     }} \\
     END \\\\
     {{ \\\\
        print sum / count; \\\\
     }}' \\\\
  < nodecovs-ont.csv

echo ""
echo Step 3b

#  cat *mapping* > ...
cat {params.maps} \\\\
  > combined-nodemap-uniques.txt

# hifi-resolved.gfa
# gapped-once-hifi-resolved.gfa
# gapped-twice-hifi-resolved.gfa
# gapped-hifi-resolved.gfa
# unrolled-hifi-resolved.gfa
# unitig-unrolled-hifi-resolved.gfa
# gapped-unitig-unrolled-hifi-resolved.gfa

grep -h '^L' {params.graphs} ../{input.graph} \\\\
  > combined-edges-uniques.gfa

# this used to have grep -v \*
#
cat {params.graphs} ../{input.graph} \\\\
| \\\\
awk 'BEGIN \\\\
     {{ \\\\
        FS="[ \\t]+"; OFS="\\t"; \\\\
     }} \\\\
     \$1 == "S" \\\\
     {{ \\\\
        print \$2, length(\$3); \\\\
     }}' \\\\
  > nodelens-uniques.txt

{PYTHON} {VERKKO}/scripts/get_original_coverage.py \\\\
  ../{input.graph} \\\\
  combined-nodemap-uniques.txt \\\\
  combined-edges-uniques.gfa \\\\
  nodelens-uniques.txt \\\\
  ../{input.hificov} \\\\
> hifi-nodecov-gapped-unitig-unrolled-hifi-resolved.csv

{PYTHON} {VERKKO}/scripts/estimate_unique_local.py \\\\
  ../{input.graph} \\\\
  hifi-nodecov-gapped-unitig-unrolled-hifi-resolved.csv \\\\
  ../{input.ont_paths} 100000 30 0.8 \\\\
> unique_nodes_ont_coverage.txt

#  COMMENTED OUT IN ORIGINAL
# {PYTHON} {VERKKO}/scripts/translate_uniques.py normal-hifi_connected_twice.gfa < unique_nodes_hifi.txt > translated_uniques.txt
# {PYTHON} {VERKKO}/scripts/translate_nodes_by_seq.py normal-hifi_connected_twice.gfa ../{input.graph} < translated_uniques.txt > unique_nodes_ont_translated.txt
# cat unique_nodes_ont_coverage.txt unique_nodes_ont_translated.txt | sort | uniq > unique_nodes_ont.txt

echo ""
echo Step 4a
{PYTHON} {VERKKO}/scripts/fix_diploid_unique_nodes.py unique_nodes_ont_coverage.txt ../{input.ont_paths} hifi-nodecov-gapped-unitig-unrolled-hifi-resolved.csv nodecovs-ont.csv ../{input.graph} \\\\
  > unique_nodes_diploidfix.txt

echo ""
echo Step 4b
{PYTHON} {VERKKO}/scripts/add_hairpin_uniques.py unique_nodes_diploidfix.txt hifi-nodecov-gapped-unitig-unrolled-hifi-resolved.csv < ../{input.graph} \\\\
  > unique_nodes_hairpinfix.txt

echo ""
echo Step 5
cp unique_nodes_hairpinfix.txt unique_nodes_ont.txt

echo ""
echo Step 6
{PYTHON} {VERKKO}/scripts/find_bridges.py unique_nodes_ont.txt \\\\
  < paths.txt \\\\
  > bridges.txt

echo ""
echo Step 7a
grep -v '(' < bridges.txt \\\\
| \\\\
grep -v '^\$' \\\\
| \\\\
{PYTHON} {VERKKO}/scripts/remove_wrong_connections_2.py forbidden_wrong_connections.txt \\\\
| \\\\
sort > bridging_seq_all.txt

echo ""
echo Step 7b
{PYTHON} {VERKKO}/scripts/pick_majority_bridge.py forbidden_minority_bridges.txt \\\\
  < bridging_seq_all.txt \\\\
  > bridging_seq_picked_all.txt

echo ""
echo Step 8
{PYTHON} {VERKKO}/scripts/remove_crosslink_paths.py \\\\
  ../{input.graph} \\\\
  unique_nodes_ont.txt \\\\
  bridging_seq_picked_all.txt \\\\
  bridges.txt \\\\
  > bridges_fixcrosslink.txt \\\\
 2> forbidden_crosslinks.txt

echo ""
echo Step 9
{PYTHON} {VERKKO}/scripts/fix_diploid_paths.py \\\\
  unique_nodes_ont.txt \\\\
  ../{input.graph} \\\\
  bridges_fixcrosslink.txt \\\\
  bridges.txt \\\\
  3 \\\\
  > bridging_seq_diploidfix_all.txt

sort < bridging_seq_diploidfix_all.txt > bridging_seq_picked.txt

echo ""
echo Step 10
# forbidden_wrong_connections.txt deliberately not included here so that if that causes a gap, the tangle is forbidden
cat forbidden_crosslinks.txt forbidden_minority_bridges.txt \\\\
  > bridging_seq_forbidden.txt

echo ""
echo Step 11
{PYTHON} {VERKKO}/scripts/forbid_unbridged_tangles.py \\\\
  unique_nodes_ont.txt \\\\
  ../{input.graph} \\\\
  bridging_seq_forbidden.txt \\\\
  bridging_seq_picked.txt \\\\
  paths.txt \\\\
  nodecovs-ont.csv \\\\
  30 \\\\
  hifi-nodecov-gapped-unitig-unrolled-hifi-resolved.csv \\\\
  10 \\\\
> forbidden_ends.txt

echo ""
echo Step 12
{PYTHON} {VERKKO}/scripts/connect_uniques.py ../{input.graph} forbidden_ends.txt bridging_seq_picked.txt unique_nodes_ont.txt \\\\
  > connected.gfa \\\\
 2> connected.gfa.err     #  It writes lots of chatter!

echo ""
echo Step 13
{PYTHON} {VERKKO}/scripts/merge_unresolved_dbg_nodes.py \\\\
  < connected.gfa \\\\
  > normal-connected.gfa

echo ""
echo Step 14
{PYTHON} {VERKKO}/scripts/get_bridge_mapping.py \\\\
  normal-connected.gfa \\\\
  ../{input.graph} \\\\
  > bridge_mapping.txt

echo ""
echo Step 15a
{PYTHON} {VERKKO}/scripts/add_fake_alignments.py \\\\
  ../{input.graph} \\\\
  normal-connected.gfa \\\\
  ../{input.ont_paths} \\\\
  nodecovs-ont.csv \\\\
  fake-ont-alns.gaf \\\\
  fake-ont-nodecovs-once.csv \\\\
  10

echo ""
echo Step 15b
{PYTHON} {VERKKO}/scripts/add_fake_bridging_paths.py \\\\
  forbidden_ends.txt \\\\
  bridging_seq_picked.txt \\\\
  fake-ont-nodecovs-once.csv \\\\
  fake-ont-nodecovs.csv \\\\
  10 \\\\
>> fake-ont-alns.gaf

#FIXME parameterize
#
echo ""
echo Step 16
{PYTHON} {VERKKO}/scripts/resolve_triplets_kmerify.py \\\\
  normal-connected.gfa \\\\
  fake-ont-paths.txt \\\\
  fake-ont-nodecovs.csv \\\\
  resolve-mapping.txt \\\\
  100000 \\\\
  {params.min_allowed_cov} \\\\
  {params.resolve_steps} \\\\
  < fake-ont-alns.gaf \\\\
  > ont-resolved-graph.gfa \\\\
 2> ont_resolved_graph.gfa.err

echo ""
echo Step 17
{PYTHON} {VERKKO}/scripts/unroll_tip_loops.py \\\\
  ont-resolved-graph.gfa 3 \\\\
  < fake-ont-paths.txt \\\\
  > unrolled-ont-resolved.gfa \\\\
 2> unrolled-ont-resolved.gfa.err

echo ""
echo Step 18
{PYTHON} {VERKKO}/scripts/get_unroll_mapping.py \\\\
  ont-resolved-graph.gfa \\\\
  unrolled-ont-resolved.gfa \\\\
> unroll_mapping_2.txt

echo ""
echo Step 19
{PYTHON} {VERKKO}/scripts/unitigify.py utig2- unitig-mapping-2.txt \\\\
  < unrolled-ont-resolved.gfa \\\\
  > ../{output.graph}
EOF

chmod +x ./processONT.sh

./processONT.sh > ../{log.err} 2>&1
        '''
