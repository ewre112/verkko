#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule combineConsensus combines the outputs of consensus into a single
#  file, and rename the sequences back to their original names.
#


#  These two functions return different paths to the inputs.  The first
#  returns a path relative to the root directory, used by Snakemake itself to
#  figure out the DAG.  The second returns a path relative to the 7-consensus
#  directory, which we use when running the command.
#
def combineConsensusI(wildcards):
    return expand("7-consensus/packages/part{nnnn}.fasta", nnnn = glob_wildcards("7-consensus/packages/part{xxxx}.cnspack").xxxx)
def combineConsensusP(wildcards):
    return expand(            "packages/part{nnnn}.fasta", nnnn = glob_wildcards("7-consensus/packages/part{xxxx}.cnspack").xxxx)

rule combineConsensus:
    input:
        packcns   = combineConsensusI,
        tigmap    = rules.buildPackages.output.tigmap,
        scfmap    = rules.layoutContigs.output.scfmap,
        finished  = rules.buildPackages.output.finished,
        pathstsv  = rules.rukki.output.pathstsv if config['ruk_enable'] == "True" else rules.emptyfile.output
    output:
        cns       = rules.verkko.input.cns,
        cnshap1   = rules.verkko.input.cnshap1,
        cnshap2   = rules.verkko.input.cnshap2,
        cnsunas   = rules.verkko.input.cnsunas
    log:
        out       = '7-consensus/combineConsensus.out',
        err       = '7-consensus/combineConsensus.err'
    params:
        packcns   = combineConsensusP,
        keepinter = config['keep_intermediate']
    threads:
        1
    resources:
        job_id = 1,
        n_cpus = 1,
        mem_gb = lambda wildcards, input, attempt: getAlignMemoryRequest(attempt, 1.25, input.packcns),
        time_h = 4
    shell:
        '''
cd 7-consensus

cat > ./combineConsensus.sh <<EOF
#!/bin/sh
set -e

echo "--------------------"
echo "Combining consensus results."
echo ""
{PYTHON} {VERKKO}/scripts/process_reads.py combine ../{output.cns} \\\\
  ../{input.tigmap} \\\\
  ../{input.scfmap} \\\\
  {params.packcns}

echo "--------------------"
echo "Finding haplotypes."
echo ""
grep ^path.haplotype1 < ../{input.scfmap} | cut -d \\  -f 2 > ./paths-haplotype1
grep ^path.haplotype2 < ../{input.scfmap} | cut -d \\  -f 2 > ./paths-haplotype2
grep ^path.unassigned < ../{input.scfmap} | cut -d \\  -f 2 > ./paths-unassigned

echo "--------------------"
echo "Extracting haplotypes."
echo ""
{PYTHON} {VERKKO}/scripts/process_reads.py extract ../{output.cnshap1} ./paths-haplotype1 ../{output.cns}
{PYTHON} {VERKKO}/scripts/process_reads.py extract ../{output.cnshap2} ./paths-haplotype2 ../{output.cns}
{PYTHON} {VERKKO}/scripts/process_reads.py extract ../{output.cnsunas} ./paths-unassigned ../{output.cns}

if [ {params.keepinter} = False ] ; then
  echo "--------------------"
  echo "Removing intermediate files."
  echo ""
  rm -rf packages
fi
EOF

chmod +x ./combineConsensus.sh

./combineConsensus.sh > ../{log.out} 2> ../{log.err}
        '''
